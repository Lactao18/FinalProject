/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pkgfinal.project;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.*;
import javax.swing.table.*;
import java.util.HashMap;
import java.util.ArrayList;



/**
 *
 * @author Rainier
 */
public class OrderFrame extends javax.swing.JFrame {
    private HashMap<String, ArrayList<String>> orderHistoryMap = new HashMap<>();
    public OrderFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        CategoryComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        ProductSelectionTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        OrderListTextArea = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        CustomerNameOrderTF = new javax.swing.JTextPane();
        jLabel5 = new javax.swing.JLabel();
        BackToDashboardButton = new javax.swing.JButton();
        ProceedToPayment = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        CustomerList = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Jokerman", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ORDER MANAGEMENT");

        CategoryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoryComboBoxActionPerformed(evt);
            }
        });

        ProductSelectionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Price", "Quantity", "Selection"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ProductSelectionTable.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(ProductSelectionTable);
        ProductSelectionTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (ProductSelectionTable.getColumnModel().getColumnCount() > 0) {
            ProductSelectionTable.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel2.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Select Product");

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Select Category");

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Order List");

        OrderListTextArea.setColumns(20);
        OrderListTextArea.setRows(5);
        jScrollPane2.setViewportView(OrderListTextArea);

        jScrollPane4.setViewportView(CustomerNameOrderTF);

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Customer Name: ");

        BackToDashboardButton.setBackground(new java.awt.Color(51, 51, 51));
        BackToDashboardButton.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BackToDashboardButton.setForeground(new java.awt.Color(255, 255, 255));
        BackToDashboardButton.setText("Back to dashboard");
        BackToDashboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToDashboardButtonActionPerformed(evt);
            }
        });

        ProceedToPayment.setBackground(new java.awt.Color(51, 51, 51));
        ProceedToPayment.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        ProceedToPayment.setForeground(new java.awt.Color(255, 255, 255));
        ProceedToPayment.setText("Proceed to payment");
        ProceedToPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProceedToPaymentActionPerformed(evt);
            }
        });

        CustomerList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Status", "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(CustomerList);
        if (CustomerList.getColumnModel().getColumnCount() > 0) {
            CustomerList.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel6.setText("Customer List");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(81, 81, 81)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(BackToDashboardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(283, 283, 283)))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(CategoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(ProceedToPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(84, 84, 84)))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BackToDashboardButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CategoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ProceedToPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    class TableButtonRenderer extends JButton implements TableCellRenderer {
    public TableButtonRenderer() {
        setOpaque(true);
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value,
        boolean isSelected, boolean hasFocus, int row, int column) {
        setText("Order");
        return this;
    }
}
    class TableButtonEditor extends DefaultCellEditor {
    protected JButton button;
    private boolean clicked;
    private JTable table;
    private OrderFrame parent;
    private int row;

    public TableButtonEditor(JCheckBox checkBox, OrderFrame parentFrame) {
        super(checkBox);
        this.parent = parentFrame;
        this.button = new JButton("Order");
        this.button.setOpaque(true);
        this.button.addActionListener(e -> fireEditingStopped());
    }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value,
        boolean isSelected, int row, int col) {
        this.table = table;
        this.row = row;
        clicked = true;
        return button;
    }

    @Override
    public Object getCellEditorValue() {
        if (clicked) {
            processOrder(row);
        }
        clicked = false;
        return "Order";
    }

    @Override
    public boolean stopCellEditing() {
        clicked = false;
        return super.stopCellEditing();
    }

    private void processOrder(int rowIndex) {
        if (rowIndex >= 0 && rowIndex < table.getRowCount()) {
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            String code = model.getValueAt(rowIndex, 0).toString();
            String name = model.getValueAt(rowIndex, 1).toString();
            double price = Double.parseDouble(model.getValueAt(rowIndex, 2).toString());
            int availableQty = Integer.parseInt(model.getValueAt(rowIndex, 3).toString());

            String input = JOptionPane.showInputDialog(parent, "Enter quantity for: " + name);
            if (input == null || input.trim().isEmpty()) return;

            int quantity;
            try {
                quantity = Integer.parseInt(input.trim());
                if (quantity <= 0) throw new NumberFormatException();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(parent, "Please enter a valid positive number.", "Invalid Quantity", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (quantity > availableQty) {
                JOptionPane.showMessageDialog(parent, "Entered quantity exceeds available stock.", "Stock Limit Exceeded", JOptionPane.WARNING_MESSAGE);
                return;
            }

            double total = price * quantity;
            String timestamp = LocalDateTime.now()
                    .format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
            String record = String.format("[%s] %s - %s: %.2f x %d = %.2f\n",
                    timestamp, code, name, price, quantity, total);

            parent.appendToOrderTextArea(record);
            Dashboard.deductProductQuantity(code, quantity);

            model.setValueAt(availableQty - quantity, rowIndex, 3);
        }
    }

}
    private void loadCustomerList() {
        DefaultTableModel model = (DefaultTableModel) CustomerList.getModel();
        model.setRowCount(0); // Clear existing rows

        for (CustomerInfo customer : Dashboard.customerList) {
            model.addRow(new Object[]{
                customer.getCusStatus(),
                customer.getCusName()
            });
        }
    }
   
    public void appendToOrderTextArea(String text) {
        OrderListTextArea.append(text);
    }
 
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loadCategoriesIntoComboBox();
        loadCustomerList();
        ProductSelectionTable.getColumnModel().getColumn(4).setCellRenderer(new TableButtonRenderer());
        ProductSelectionTable.getColumnModel().getColumn(4).setCellEditor(new TableButtonEditor(new JCheckBox(), this));
        loadOrderHistory(); 
    }//GEN-LAST:event_formWindowOpened

    private void ProceedToPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProceedToPaymentActionPerformed
        String customerName = CustomerNameOrderTF.getText().trim();
        String orderText = OrderListTextArea.getText().trim();

        if (customerName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Customer name is required.", "Missing Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        boolean customerFound = false;
        for (CustomerInfo c : Dashboard.customerList) {
            if (c.getCusName().equalsIgnoreCase(customerName)) {
                customerFound = true;
                if (!c.getCusStatus().equalsIgnoreCase("Active")) {
                    JOptionPane.showMessageDialog(this, "Customer is inactive.", "Access Denied", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                break;
            }
        }
        if (!customerFound) {
            JOptionPane.showMessageDialog(this, "Customer not found in the records.", "Invalid Customer", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (orderText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No products selected for ordering.", "No Order", JOptionPane.ERROR_MESSAGE);
            return;
        }

        PaymentFrame paymentFrame = new PaymentFrame();
        paymentFrame.setOrderListText(OrderListTextArea.getText());
        paymentFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ProceedToPaymentActionPerformed

    private void BackToDashboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToDashboardButtonActionPerformed
        new Dashboard().setVisible(true);
        dispose();
    }//GEN-LAST:event_BackToDashboardButtonActionPerformed

    private void CategoryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoryComboBoxActionPerformed
        String selectedCategory = (String) CategoryComboBox.getSelectedItem();
        if (selectedCategory != null) {
            filterProductsByCategory(selectedCategory);
        }
    }//GEN-LAST:event_CategoryComboBoxActionPerformed
    
    
    private void loadOrderHistory() {
        try (BufferedReader reader = new BufferedReader(new FileReader("orders.txt"))) {
            StringBuilder content = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                content.append(line).append("\n");
            }

            if (content.length() == 0) {
                OrderListTextArea.setText(" ");
            } else {
                OrderListTextArea.setText(content.toString());
            }
        } catch (IOException e) {
            OrderListTextArea.setText(" ");
        }
    }
    private void loadCategoriesIntoComboBox() {
        CategoryComboBox.removeAllItems();

        if (ManageCategory.categoryList.isEmpty()) {
            int result = JOptionPane.showConfirmDialog(
                this,
                "No categories found. Do you want to add categories now?",
                "Category Required",
                JOptionPane.OK_CANCEL_OPTION
            );
            if (result == JOptionPane.OK_OPTION) {
                new ManageCategory().setVisible(true);
                dispose();
            } else {
                JOptionPane.showMessageDialog(this, "Category selection is required to continue.");
            }
            return;
        }

        CategoryComboBox.addItem("All products");
        for (String category : ManageCategory.categoryList) {
            CategoryComboBox.addItem(category);
        }

        filterProductsByCategory("All products");
    }
    
    private void filterProductsByCategory(String category) {
        DefaultTableModel model = (DefaultTableModel) ProductSelectionTable.getModel();
        model.setRowCount(0);
        boolean productFound = false;

        for (Products p : Dashboard.productList) {
            if (category.equals("All products") || p.getCategory().equals(category)) {
                model.addRow(new Object[]{
                    p.getCode(),
                    p.getName(),
                    p.getPrice(),
                    p.getQuantity(),
                    "Select"
                });
                productFound = true;
            }
        }

        if (!productFound) {
            JOptionPane.showMessageDialog(this, "No products found for selected category.", "No Products", JOptionPane.WARNING_MESSAGE);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackToDashboardButton;
    private javax.swing.JComboBox<String> CategoryComboBox;
    private javax.swing.JTable CustomerList;
    private javax.swing.JTextPane CustomerNameOrderTF;
    private javax.swing.JTextArea OrderListTextArea;
    private javax.swing.JButton ProceedToPayment;
    private javax.swing.JTable ProductSelectionTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
